// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	context "context"
	entities "open-chat/internal/entities"

	mock "github.com/stretchr/testify/mock"
)

// ChannelRepository is an autogenerated mock type for the ChannelRepository type
type ChannelRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, channel
func (_m *ChannelRepository) Create(ctx context.Context, channel entities.Channel) (entities.ChannelId, error) {
	ret := _m.Called(ctx, channel)

	var r0 entities.ChannelId
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.Channel) (entities.ChannelId, error)); ok {
		return rf(ctx, channel)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entities.Channel) entities.ChannelId); ok {
		r0 = rf(ctx, channel)
	} else {
		r0 = ret.Get(0).(entities.ChannelId)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entities.Channel) error); ok {
		r1 = rf(ctx, channel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, channelId
func (_m *ChannelRepository) Delete(ctx context.Context, channelId entities.ChannelId) error {
	ret := _m.Called(ctx, channelId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.ChannelId) error); ok {
		r0 = rf(ctx, channelId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByServerId provides a mock function with given fields: ctx, serverId
func (_m *ChannelRepository) FindByServerId(ctx context.Context, serverId entities.ServerId) ([]entities.Channel, error) {
	ret := _m.Called(ctx, serverId)

	var r0 []entities.Channel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.ServerId) ([]entities.Channel, error)); ok {
		return rf(ctx, serverId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entities.ServerId) []entities.Channel); ok {
		r0 = rf(ctx, serverId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Channel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entities.ServerId) error); ok {
		r1 = rf(ctx, serverId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewChannelRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewChannelRepository creates a new instance of ChannelRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewChannelRepository(t mockConstructorTestingTNewChannelRepository) *ChannelRepository {
	mock := &ChannelRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
