// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	context "context"
	entities "open-chat/internal/entities"

	mock "github.com/stretchr/testify/mock"
)

// MessageRepository is an autogenerated mock type for the MessageRepository type
type MessageRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, message
func (_m *MessageRepository) Create(ctx context.Context, message entities.Message) (entities.MessageId, error) {
	ret := _m.Called(ctx, message)

	var r0 entities.MessageId
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.Message) (entities.MessageId, error)); ok {
		return rf(ctx, message)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entities.Message) entities.MessageId); ok {
		r0 = rf(ctx, message)
	} else {
		r0 = ret.Get(0).(entities.MessageId)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entities.Message) error); ok {
		r1 = rf(ctx, message)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, messageId
func (_m *MessageRepository) Delete(ctx context.Context, messageId entities.MessageId) error {
	ret := _m.Called(ctx, messageId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.MessageId) error); ok {
		r0 = rf(ctx, messageId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByChannel provides a mock function with given fields: ctx, channelId, offset, count
func (_m *MessageRepository) FindByChannelId(ctx context.Context, channelId entities.ChannelId, offset uint64, count uint64) ([]entities.Message, error) {
	ret := _m.Called(ctx, channelId, offset, count)

	var r0 []entities.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.ChannelId, uint64, uint64) ([]entities.Message, error)); ok {
		return rf(ctx, channelId, offset, count)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entities.ChannelId, uint64, uint64) []entities.Message); ok {
		r0 = rf(ctx, channelId, offset, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entities.ChannelId, uint64, uint64) error); ok {
		r1 = rf(ctx, channelId, offset, count)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMessageRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMessageRepository creates a new instance of MessageRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMessageRepository(t mockConstructorTestingTNewMessageRepository) *MessageRepository {
	mock := &MessageRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
