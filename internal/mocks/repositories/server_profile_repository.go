// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	context "context"
	entities "open-chat/internal/entities"

	mock "github.com/stretchr/testify/mock"
)

// ServerProfileRepository is an autogenerated mock type for the ServerProfileRepository type
type ServerProfileRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, serverProfile
func (_m *ServerProfileRepository) Create(ctx context.Context, serverProfile entities.ServerProfile) (entities.ServerProfileId, error) {
	ret := _m.Called(ctx, serverProfile)

	var r0 entities.ServerProfileId
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.ServerProfile) (entities.ServerProfileId, error)); ok {
		return rf(ctx, serverProfile)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entities.ServerProfile) entities.ServerProfileId); ok {
		r0 = rf(ctx, serverProfile)
	} else {
		r0 = ret.Get(0).(entities.ServerProfileId)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entities.ServerProfile) error); ok {
		r1 = rf(ctx, serverProfile)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, serverProfileId
func (_m *ServerProfileRepository) Delete(ctx context.Context, serverProfileId entities.ServerProfileId) error {
	ret := _m.Called(ctx, serverProfileId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.ServerProfileId) error); ok {
		r0 = rf(ctx, serverProfileId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindById provides a mock function with given fields: ctx, serverProfileId
func (_m *ServerProfileRepository) FindById(ctx context.Context, serverProfileId entities.ServerProfileId) (*entities.ServerProfile, error) {
	ret := _m.Called(ctx, serverProfileId)

	var r0 *entities.ServerProfile
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.ServerProfileId) (*entities.ServerProfile, error)); ok {
		return rf(ctx, serverProfileId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entities.ServerProfileId) *entities.ServerProfile); ok {
		r0 = rf(ctx, serverProfileId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.ServerProfile)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entities.ServerProfileId) error); ok {
		r1 = rf(ctx, serverProfileId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewServerProfileRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewServerProfileRepository creates a new instance of ServerProfileRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewServerProfileRepository(t mockConstructorTestingTNewServerProfileRepository) *ServerProfileRepository {
	mock := &ServerProfileRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
