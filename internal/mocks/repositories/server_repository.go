// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	context "context"
	entities "open-chat/internal/entities"

	mock "github.com/stretchr/testify/mock"
)

// ServerRepository is an autogenerated mock type for the ServerRepository type
type ServerRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, server
func (_m *ServerRepository) Create(ctx context.Context, server entities.Server) (entities.ServerId, error) {
	ret := _m.Called(ctx, server)

	var r0 entities.ServerId
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.Server) (entities.ServerId, error)); ok {
		return rf(ctx, server)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entities.Server) entities.ServerId); ok {
		r0 = rf(ctx, server)
	} else {
		r0 = ret.Get(0).(entities.ServerId)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entities.Server) error); ok {
		r1 = rf(ctx, server)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, serverId
func (_m *ServerRepository) Delete(ctx context.Context, serverId entities.ServerId) error {
	ret := _m.Called(ctx, serverId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.ServerId) error); ok {
		r0 = rf(ctx, serverId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByChannelId provides a mock function with given fields: ctx, channelId
func (_m *ServerRepository) FindByChannelId(ctx context.Context, channelId entities.ChannelId) (*entities.Server, error) {
	ret := _m.Called(ctx, channelId)

	var r0 *entities.Server
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.ChannelId) (*entities.Server, error)); ok {
		return rf(ctx, channelId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entities.ChannelId) *entities.Server); ok {
		r0 = rf(ctx, channelId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Server)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entities.ChannelId) error); ok {
		r1 = rf(ctx, channelId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByMessageId provides a mock function with given fields: ctx, messageId
func (_m *ServerRepository) FindByMessageId(ctx context.Context, messageId entities.MessageId) (*entities.Server, error) {
	ret := _m.Called(ctx, messageId)

	var r0 *entities.Server
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.MessageId) (*entities.Server, error)); ok {
		return rf(ctx, messageId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entities.MessageId) *entities.Server); ok {
		r0 = rf(ctx, messageId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Server)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entities.MessageId) error); ok {
		r1 = rf(ctx, messageId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewServerRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewServerRepository creates a new instance of ServerRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewServerRepository(t mockConstructorTestingTNewServerRepository) *ServerRepository {
	mock := &ServerRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
