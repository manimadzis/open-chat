// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	context "context"
	entities "open-chat/internal/entities"

	mock "github.com/stretchr/testify/mock"
)

// SessionRepository is an autogenerated mock type for the SessionRepository type
type SessionRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, session
func (_m *SessionRepository) Create(ctx context.Context, session entities.Session) error {
	ret := _m.Called(ctx, session)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.Session) error); ok {
		r0 = rf(ctx, session)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByToken provides a mock function with given fields: ctx, session
func (_m *SessionRepository) DeleteByToken(ctx context.Context, session entities.SessionToken) error {
	ret := _m.Called(ctx, session)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.SessionToken) error); ok {
		r0 = rf(ctx, session)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByToken provides a mock function with given fields: ctx, session
func (_m *SessionRepository) FindByToken(ctx context.Context, session entities.SessionToken) (*entities.Session, error) {
	ret := _m.Called(ctx, session)

	var r0 *entities.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.SessionToken) (*entities.Session, error)); ok {
		return rf(ctx, session)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entities.SessionToken) *entities.Session); ok {
		r0 = rf(ctx, session)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entities.SessionToken) error); ok {
		r1 = rf(ctx, session)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByUserId provides a mock function with given fields: ctx, session
func (_m *SessionRepository) FindByUserId(ctx context.Context, session *entities.Session) (*entities.Session, error) {
	ret := _m.Called(ctx, session)

	var r0 *entities.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Session) (*entities.Session, error)); ok {
		return rf(ctx, session)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Session) *entities.Session); ok {
		r0 = rf(ctx, session)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entities.Session) error); ok {
		r1 = rf(ctx, session)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewSessionRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewSessionRepository creates a new instance of SessionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSessionRepository(t mockConstructorTestingTNewSessionRepository) *SessionRepository {
	mock := &SessionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
