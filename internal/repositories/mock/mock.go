// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repositories/interfaces.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	entities "open-chat/internal/entities"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockChannelRepository is a mock of ChannelRepository interface.
type MockChannelRepository struct {
	ctrl     *gomock.Controller
	recorder *MockChannelRepositoryMockRecorder
}

// MockChannelRepositoryMockRecorder is the mock recorder for MockChannelRepository.
type MockChannelRepositoryMockRecorder struct {
	mock *MockChannelRepository
}

// NewMockChannelRepository creates a new mock instance.
func NewMockChannelRepository(ctrl *gomock.Controller) *MockChannelRepository {
	mock := &MockChannelRepository{ctrl: ctrl}
	mock.recorder = &MockChannelRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChannelRepository) EXPECT() *MockChannelRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockChannelRepository) Create(ctx context.Context, channel *entities.Channel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, channel)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockChannelRepositoryMockRecorder) Create(ctx, channel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockChannelRepository)(nil).Create), ctx, channel)
}

// Delete mocks base method.
func (m *MockChannelRepository) Delete(ctx context.Context, channelId entities.ChannelId) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, channelId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockChannelRepositoryMockRecorder) Delete(ctx, channelId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockChannelRepository)(nil).Delete), ctx, channelId)
}

// FindByServerId mocks base method.
func (m *MockChannelRepository) FindByServerId(ctx context.Context, serverId entities.ServerId) ([]entities.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByServerId", ctx, serverId)
	ret0, _ := ret[0].([]entities.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByServerId indicates an expected call of FindByServerId.
func (mr *MockChannelRepositoryMockRecorder) FindByServerId(ctx, serverId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByServerId", reflect.TypeOf((*MockChannelRepository)(nil).FindByServerId), ctx, serverId)
}

// MockMessageRepository is a mock of MessageRepository interface.
type MockMessageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMessageRepositoryMockRecorder
}

// MockMessageRepositoryMockRecorder is the mock recorder for MockMessageRepository.
type MockMessageRepositoryMockRecorder struct {
	mock *MockMessageRepository
}

// NewMockMessageRepository creates a new mock instance.
func NewMockMessageRepository(ctrl *gomock.Controller) *MockMessageRepository {
	mock := &MockMessageRepository{ctrl: ctrl}
	mock.recorder = &MockMessageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageRepository) EXPECT() *MockMessageRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockMessageRepository) Create(ctx context.Context, message *entities.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockMessageRepositoryMockRecorder) Create(ctx, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMessageRepository)(nil).Create), ctx, message)
}

// Delete mocks base method.
func (m *MockMessageRepository) Delete(ctx context.Context, messageId entities.MessageId) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, messageId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockMessageRepositoryMockRecorder) Delete(ctx, messageId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMessageRepository)(nil).Delete), ctx, messageId)
}

// FindByChannel mocks base method.
func (m *MockMessageRepository) FindByChannel(ctx context.Context, channelId entities.ChannelId, offset, count uint64) ([]entities.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByChannel", ctx, channelId, offset, count)
	ret0, _ := ret[0].([]entities.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByChannel indicates an expected call of FindByChannel.
func (mr *MockMessageRepositoryMockRecorder) FindByChannel(ctx, channelId, offset, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByChannel", reflect.TypeOf((*MockMessageRepository)(nil).FindByChannel), ctx, channelId, offset, count)
}

// MockRoleRepository is a mock of RoleRepository interface.
type MockRoleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRoleRepositoryMockRecorder
}

// MockRoleRepositoryMockRecorder is the mock recorder for MockRoleRepository.
type MockRoleRepositoryMockRecorder struct {
	mock *MockRoleRepository
}

// NewMockRoleRepository creates a new mock instance.
func NewMockRoleRepository(ctrl *gomock.Controller) *MockRoleRepository {
	mock := &MockRoleRepository{ctrl: ctrl}
	mock.recorder = &MockRoleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoleRepository) EXPECT() *MockRoleRepositoryMockRecorder {
	return m.recorder
}

// Change mocks base method.
func (m *MockRoleRepository) Change(ctx context.Context, role *entities.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Change", ctx, role)
	ret0, _ := ret[0].(error)
	return ret0
}

// Change indicates an expected call of Change.
func (mr *MockRoleRepositoryMockRecorder) Change(ctx, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Change", reflect.TypeOf((*MockRoleRepository)(nil).Change), ctx, role)
}

// Create mocks base method.
func (m *MockRoleRepository) Create(ctx context.Context, role *entities.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, role)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockRoleRepositoryMockRecorder) Create(ctx, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRoleRepository)(nil).Create), ctx, role)
}

// Delete mocks base method.
func (m *MockRoleRepository) Delete(ctx context.Context, roleId entities.RoleId) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, roleId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRoleRepositoryMockRecorder) Delete(ctx, roleId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRoleRepository)(nil).Delete), ctx, roleId)
}

// FindPermissionsByValue mocks base method.
func (m *MockRoleRepository) FindPermissionsByValue(ctx context.Context, permission []entities.PermissionValue) ([]entities.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPermissionsByValue", ctx, permission)
	ret0, _ := ret[0].([]entities.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPermissionsByValue indicates an expected call of FindPermissionsByValue.
func (mr *MockRoleRepositoryMockRecorder) FindPermissionsByValue(ctx, permission interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPermissionsByValue", reflect.TypeOf((*MockRoleRepository)(nil).FindPermissionsByValue), ctx, permission)
}

// FindRolesByServerId mocks base method.
func (m *MockRoleRepository) FindRolesByServerId(ctx context.Context, serverId entities.ServerId) ([]entities.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRolesByServerId", ctx, serverId)
	ret0, _ := ret[0].([]entities.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRolesByServerId indicates an expected call of FindRolesByServerId.
func (mr *MockRoleRepositoryMockRecorder) FindRolesByServerId(ctx, serverId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRolesByServerId", reflect.TypeOf((*MockRoleRepository)(nil).FindRolesByServerId), ctx, serverId)
}

// MockServerRepository is a mock of ServerRepository interface.
type MockServerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockServerRepositoryMockRecorder
}

// MockServerRepositoryMockRecorder is the mock recorder for MockServerRepository.
type MockServerRepositoryMockRecorder struct {
	mock *MockServerRepository
}

// NewMockServerRepository creates a new mock instance.
func NewMockServerRepository(ctrl *gomock.Controller) *MockServerRepository {
	mock := &MockServerRepository{ctrl: ctrl}
	mock.recorder = &MockServerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServerRepository) EXPECT() *MockServerRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockServerRepository) Create(ctx context.Context, server *entities.Server) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, server)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockServerRepositoryMockRecorder) Create(ctx, server interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockServerRepository)(nil).Create), ctx, server)
}

// Delete mocks base method.
func (m *MockServerRepository) Delete(ctx context.Context, serverId entities.ServerId) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, serverId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockServerRepositoryMockRecorder) Delete(ctx, serverId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockServerRepository)(nil).Delete), ctx, serverId)
}

// FindByChannelId mocks base method.
func (m *MockServerRepository) FindByChannelId(ctx context.Context, channelId entities.ChannelId) (entities.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByChannelId", ctx, channelId)
	ret0, _ := ret[0].(entities.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByChannelId indicates an expected call of FindByChannelId.
func (mr *MockServerRepositoryMockRecorder) FindByChannelId(ctx, channelId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByChannelId", reflect.TypeOf((*MockServerRepository)(nil).FindByChannelId), ctx, channelId)
}

// FindByMessageId mocks base method.
func (m *MockServerRepository) FindByMessageId(ctx context.Context, messageId entities.MessageId) (entities.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByMessageId", ctx, messageId)
	ret0, _ := ret[0].(entities.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByMessageId indicates an expected call of FindByMessageId.
func (mr *MockServerRepositoryMockRecorder) FindByMessageId(ctx, messageId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByMessageId", reflect.TypeOf((*MockServerRepository)(nil).FindByMessageId), ctx, messageId)
}

// Join mocks base method.
func (m *MockServerRepository) Join(ctx context.Context, serverId entities.ServerId, userId entities.UserId) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Join", ctx, serverId, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Join indicates an expected call of Join.
func (mr *MockServerRepositoryMockRecorder) Join(ctx, serverId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Join", reflect.TypeOf((*MockServerRepository)(nil).Join), ctx, serverId, userId)
}

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserRepository) Create(ctx context.Context, user *entities.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserRepositoryMockRecorder) Create(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserRepository)(nil).Create), ctx, user)
}

// FindById mocks base method.
func (m *MockUserRepository) FindById(ctx context.Context, user *entities.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindById indicates an expected call of FindById.
func (mr *MockUserRepositoryMockRecorder) FindById(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockUserRepository)(nil).FindById), ctx, user)
}

// FindServerProfileByIds mocks base method.
func (m *MockUserRepository) FindServerProfileByIds(ctx context.Context, userId entities.UserId, serverId entities.ServerId) (entities.ServerProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindServerProfileByIds", ctx, userId, serverId)
	ret0, _ := ret[0].(entities.ServerProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindServerProfileByIds indicates an expected call of FindServerProfileByIds.
func (mr *MockUserRepositoryMockRecorder) FindServerProfileByIds(ctx, userId, serverId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindServerProfileByIds", reflect.TypeOf((*MockUserRepository)(nil).FindServerProfileByIds), ctx, userId, serverId)
}

// MockSessionRepository is a mock of SessionRepository interface.
type MockSessionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSessionRepositoryMockRecorder
}

// MockSessionRepositoryMockRecorder is the mock recorder for MockSessionRepository.
type MockSessionRepositoryMockRecorder struct {
	mock *MockSessionRepository
}

// NewMockSessionRepository creates a new mock instance.
func NewMockSessionRepository(ctrl *gomock.Controller) *MockSessionRepository {
	mock := &MockSessionRepository{ctrl: ctrl}
	mock.recorder = &MockSessionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionRepository) EXPECT() *MockSessionRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSessionRepository) Create(ctx context.Context, session *entities.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, session)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSessionRepositoryMockRecorder) Create(ctx, session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSessionRepository)(nil).Create), ctx, session)
}

// DeleteByToken mocks base method.
func (m *MockSessionRepository) DeleteByToken(ctx context.Context, session *entities.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByToken", ctx, session)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByToken indicates an expected call of DeleteByToken.
func (mr *MockSessionRepositoryMockRecorder) DeleteByToken(ctx, session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByToken", reflect.TypeOf((*MockSessionRepository)(nil).DeleteByToken), ctx, session)
}

// FindByToken mocks base method.
func (m *MockSessionRepository) FindByToken(ctx context.Context, session *entities.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByToken", ctx, session)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindByToken indicates an expected call of FindByToken.
func (mr *MockSessionRepositoryMockRecorder) FindByToken(ctx, session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByToken", reflect.TypeOf((*MockSessionRepository)(nil).FindByToken), ctx, session)
}

// FindByUser mocks base method.
func (m *MockSessionRepository) FindByUser(ctx context.Context, session *entities.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUser", ctx, session)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindByUser indicates an expected call of FindByUser.
func (mr *MockSessionRepositoryMockRecorder) FindByUser(ctx, session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUser", reflect.TypeOf((*MockSessionRepository)(nil).FindByUser), ctx, session)
}
